服务启动关闭
启动：rabbitmq-server -detached 
关闭：rabbitmqctl stop

集群配置相关命令
rabbitmqctl stop_app 
rabbitmqctl reset 
在当前集群中加入某节点：rabbitmqctl join_cluster {rabbit_node_name} （某些低版本可以采用rabbitmqctl cluster {rabbit_node_name}） 
rabbitmqctl start_app 
集群状态：rabbitmqctl cluster_status 
将某节点剔除出当前集群：rabbitmqctl forget_cluster_node {rabbit_node_name}

插件管理
开启某个插件： rabbitmq-plugins enable {插件名} 
关闭某个插件： rabbitmq-plugins disable {插件名} 
有关插件名可以在rabbitmq的安装目录下的plugins目录中查看：$RABBITMQ_HOME/plugins 
举例： 
rabbitmq-plugins enable rabbitmq_management 
rabbitmq-plugins list

用户管理
添加用户：rabbitmqctl add_user {username} {password} 
删除用户：rabbitmqctl delete_user {username} 
修改密码：rabbitmqctl change_password {username} {newpassword} 
设置用户角色：rabbitmqctl set_user_tags {username} {tag} 
tag可以为administrator, monitoring, management 
举例： 
rabbitmqctl add_user root root 
rabbitmqctl set_user_tags root administrator 
rabbitmqctl list_users

权限管理
权限设置：rabbitmqctl set_permissions [-p vhostpath] {user} {conf} {write} {read} 
    conf:一个正则表达式match哪些配置资源能够被该用户访问。 
    write:一个正则表达式match哪些配置资源能够被该用户读。 
    read:一个正则表达式match哪些配置资源能够被该用户访问。

查看（指定vhost）所有用户的权限信息：rabbitmqctl list_permissions [-p vhostPath] 
查看指定用户的权限信息：rabbitmqctl list_user_permissions {username} 
清除用户的权限信息： rabbitmqctl clear_permissions [-p vhostPath] {username}

举例： 
rabbitmqctl set_permissions -p / root “.*” “.*” “.*”

获取服务器状态信息
服务器状态：rabbitmqctl status 
队列信息： rabbitmqctl list_queues [-p vhostpath] [queueinfoitem …] 
queueinfoitem可以为： name, durable, auto_delete, arguments, messages_ready, messages_unacknowled, messages, consumers, memory.

Exchange信息： rabbitmqctl list_exchanges [-p vhostpath] [exchangeinfoitem …] 
exchangeinfoitem有：name, type, durable, auto_delete, internal, arguments.

Binding信息：rabbitmqctl list_bindings [-p vhostpath] [bindinginfoitem …] 
bindinginfoitem有：source_name, source_kind, destination_name, destination_kind, routing_key, arguments.等

connection信息：rabbitmqctl list_connections [connectioninfoitem …] 
connectioninfoitem有：recv_oct，recv_cnt，send_oct，send_cnt，send_pend等。

channel信息：rabbitmqctl list_channels [channelinfoitem …] 
channelinfoitem有:consumer_count，messages_unacknowledged，messages_uncommitted，acks_uncommitted，messages_unconfirmed，prefetch_count，client_flow_blocked

举例： 
rabbitmqctl list_queues name messages_ready pid slave_pids

更改节点类型
rabbitmqctl stop_app 
rabbitmqctl change_cluster_node_type disc 
或 
rabbitmqctl change_cluster_node_type ram 
rabbitmqctl start_app

vhost管理
添加vhost: rabbitmqctl add vhost {name} 
删除vhost: rabbitmqctl delete vhost {name}

镜像队列的设置
镜像队列的配置通过添加policy完成，policy添加的命令为： 
rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority] 
-p Vhost: 可选参数，针对指定vhost下的queue进行设置 
Name: policy的名称 
Pattern: queue的匹配模式（正则表达式） 
Definition: 镜像定义，包括三个部分 ha-mode，ha-params，ha-sync-mode 
    ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes 
        all表示在集群所有的节点上进行镜像 
        exactly表示在指定个数的节点上进行镜像，节点的个数由ha-params指定 
        nodes表示在指定的节点上进行镜像，节点名称通过ha-params指定 
    ha-params: ha-mode模式需要用到的参数 
    ha-sync-mode: 镜像队列中消息的同步方式，有效值为automatic，manually 
Priority: 可选参数， policy的优先级

例如，对队列名称以hello开头的所有队列进行镜像，并在集群的两个节点上完成镜像，policy的设置命令为： 
rabbitmqctl set_policy hello-ha “^hello” ‘{“ha-mode”:”exactly”,”ha-params”:2,”ha-sync-mode”:”automatic”}’

rabbitmqctl set_policy all-ha “^” ‘{“ha-mode”:”exactly”,”ha-params”:2,”ha-sync-mode”:”automatic”}’
rabbitmqctl set_policy ha-all "^" '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'

rabbitmqctl set_policy -p / ha-all "^" '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'


1）基本管理命令
# 停止在erlang node上运行的rabbitmq，会使rabbitmq停止；
stop
 
#停止erlang node上的rabbitmq的应用，但是erlang node还是会继续运行的；
stop_app            
 
#启动erlan node上的rabbitmq的应用； 
start_app           
 
# 等待rabbitmq服务启动；
wait <pid_file>     
 
# 初始化node状态，会从集群中删除该节点，从管理数据库中删除所有数据，例如vhosts等等。在初始化之前rabbitmq的应用必须先停止；
reset               
 
# 无条件的初始化node状态；
force_reset         
  
# 轮转日志文件；
rotate_logs <suffix>

2）集群管理命令
# clusternode表示node名称，--ram表示node以ram node加入集群中。默认node以disc node加入集群，在一个node加入cluster之前，必须先停止该node的rabbitmq应用，即先执行stop_app；
join_cluster <clusternode> [--ram]  

# 显示cluster中的所有node；
cluster_status                      

# 改变一个cluster中节点的模式，该节点在转换前必须先停止，不能把一个集群中唯一的disk node转化为ram node；
stop_app
change_cluster_node_type disc | ram
start_app
 
# 远程移除cluster中的一个node，前提是该node必须处于offline状态，如果是online状态，则需要加--offline参数；
forget_cluster_node [--offline]     

# 更新集群节点；
update_cluster_nodes clusternode    

# 同步镜像队列；
sync_queue queue
rabbitmqctl sync_queue -p coresystem rabbitMQ.test

# 取消同步镜像队列；
cancel_sync_queue queue

3）用户管理命令
# 在rabbitmq的内部数据库添加用户；
add_user <username> <password>  
 
# 删除一个用户；
delete_user <username>  
 
# 改变用户密码（也是改变web管理登陆密码）；
change_password <username> <newpassword>  
 
# 清除用户的密码，该用户将不能使用密码登陆，但是可以通过SASL登陆如果配置了SASL认证；
clear_password <username> 
 
# 设置用户tags；
set_user_tags <username> <tag> ...
 
# 列出用户；
list_users  
 
# 创建一个vhosts；
add_vhost <vhostpath>  
 
# 删除一个vhosts；
delete_vhost <vhostpath>  
 
# 列出vhosts；
list_vhosts [<vhostinfoitem> ...]  
 
# 针对一个vhosts给用户赋予相关权限；
set_permissions [-p <vhostpath>] <user> <conf> <write> <read>  
 
# 清除一个用户对vhosts的权限；
clear_permissions [-p <vhostpath>] <username>  
 
# 列出哪些用户可以访问该vhosts；
list_permissions [-p <vhostpath>]   
 
# 列出该用户的访问权限；
list_user_permissions <username>  
 
set_parameter [-p <vhostpath>] <component_name> <name> <value>
clear_parameter [-p <vhostpath>] <component_name> <key>
list_parameters [-p <vhostpath>]

4）策略管理命令
策略用来控制和修改queues和exchange在集群中的行为，策略可以应用到vhost
# 设置一个policy，"name"为该policy的名字，"pattern"为一个正则表达式，所有匹配该正则表达式的资源都会应用该 policy，"definition"是policy的定义，为json格式。"priority"为优先权，整数值。
set_policy [-p vhostpath] {name} {pattern} {definition} [priority] 
   
# 清除一个策略；
clear_policy [-p <vhostpath>] <name>
 
# 列出已有的策略；
list_policies [-p <vhostpath>]

queues && exchange状态信息
# 返回queue的信息，如果省略了-p参数，则默认显示的是"/"vhosts的信息；
list_queues [-p <vhostpath>] [<queueinfoitem> ...]  
 
# 返回exchange的信息；
list_exchanges [-p <vhostpath>] [<exchangeinfoitem> ...]  
 
# 返回绑定信息；
list_bindings [-p <vhostpath>] [<bindinginfoitem> ...] 
 
# 返回链接信息；
list_connections [<connectioninfoitem> ...]  
 
# 返回目前所有的channels；
list_channels [<channelinfoitem> ...]  
 
# 返回consumers；
list_consumers [-p <vhostpath>]  
 
# 显示broker的状态；
status  
 
# 显示环境参数的信息；
environment  
 
# 返回一个服务状态report；
report

rabbitmq支持各种插件，开启插件可以使用rabbitmq-plugins命令

插件的开启和关闭方法
rabbitmq-plugins <command> [<command options>]
Commands:
  list [-v] [-m] [-E] [-e] [<pattern>]  #显示所有的的插件，-v显示版本、-m显示名称、-E显示明确已经开启的、-e显示明确的和暗中开启的；
  enable <plugin> ...                   #开启一个插件；
  disable <plugin> ...                  #关闭一个插件；
  
如，开启rabbitmq web监控界面插件（端口15672）。
rabbitmq-plugins enable rabbitmq_management

在debian/ubuntu下插件一般安装路径：/usr/lib/rabbitmq/lib/rabbitmq_server-3.2.2/plugins


一些重要的警告：
当整个集群关闭时，最后一个关闭的节点必须是第一个要联机的节点。
如果要脱机的最后一个节点无法恢复，可以使用forget_cluster_node命令将其从群集中删除
如果所有集群节点同时停止并且不受控制（例如断电），则可能会留下所有节点都认为其他节点在其后停止的情况。在这种情况下，您可以在一个节点上使用force_boot命令使其再次可引导


rabbitmqctl set_policy -p szedidemoHost ha-all "^" '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'

admin administrator	/, apiDevHost, apiProduceHost, cebdemoHost, cebdevHost, cebtestHost, dcHost, dsdemoHost, dsdevHost, dstestHost, payDemoHost, payDevHost, payTestHost, szedidemoHost
api apiDevHost, apiProduceHost
ceb cebdemoHost, cebdevHost, cebtestHost
dc dcHost
ds dsdemoHost, dsdevHost, dstestHost
guest administrator	/
pay payDemoHost, payDevHost, payTestHost
szedi administrator	/, szedidemoHost