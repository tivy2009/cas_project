查看centos版本
[root@localhost ~]# cat /etc/redhat-release
CentOS release 5.5 (Final)

查看系统是64位还是32位:
[root@localhost ~]# getconf LONG_BIT
64

代理上网
（1） http
vim /etc/profile
http_proxy=http://username:password@yourproxy:8080/
ftp_proxy=http://username:password@yourproxy:8080/
export http_proxy
export ftp_proxy
source /etc/profile
（2） yum
vim /etc/yum.conf
proxy=http://username:password@yourproxy:8080/
source /etc/profile
(3) wget
vim /etc/wgetrc
http_proxy=http://username:password@yourproxy:8080
https_proxy=http://username:password@yourproxy:8080
ftp_proxy=http://username:password@yourproxy:8080
source /etc/profile

更新163源
cd /etc/yum.repos.d
mv CentOS-Base.repo CentOS-Base.repo.backup
wget http://mirrors.163.com/.help/CentOS6-Base-163.repo
mv CentOS6-Base-163.repo CentOS-Base.repo
yum clean all

更新阿里源
cd /etc/yum.repos.d
sudo mv CentOS-Base.repo CentOS-Base.repo.bak
sudo wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
sudo wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-7.repo （添加阿里EPEL源，可选）
yum clean all
yum makecache

安装所需环境
(自己编译安装)
yum install gcc-c++

yum install -y pcre pcre-devel

yum install -y zlib zlib-devel

yum install -y openssl openssl-devel

wget -c https://nginx.org/download/nginx-1.13.12.tar.gz

tar -zxvf nginx-1.13.12.tar.gz
cd nginx-1.13.12

配置
使用默认配置

./configure

自定义配置（不推荐）

./configure \
--prefix=/usr/local/nginx \
--conf-path=/usr/local/nginx/conf/nginx.conf \
--pid-path=/usr/local/nginx/conf/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--with-http_gzip_static_module \
--http-client-body-temp-path=/var/temp/nginx/client \
--http-proxy-temp-path=/var/temp/nginx/proxy \
--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
--http-scgi-temp-path=/var/temp/nginx/scgi

安装nginx_upstream_check_module-master模块前需要先执行对应版本的补丁文件
yum install patch
patch -p1 < /opt/nginx_source/nginx_upstream_check_module-master/check_1.12.1+.patch

添加sticky模块安装，如果已经安装了需要再添加模块，必须要重新编译
 ./configure --prefix=/usr/local/nginx \
 --with-http_stub_status_module \
 --with-http_ssl_module --with-http_realip_module \
 --with-http_image_filter_module \
 --add-module=../nginx-goodies-nginx-sticky-module-ng \
 --add-module=../nginx_upstream_check_module-master
 
 ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master
 
 如果./configure报错提示需要安装GD lib模块，则执行如下命令安装
  yum install gd-devel
  
  然后 make 
  如果是第一次安装接着执行make install
  如果已经安装了，只是添加模块，则不用再执行make install  ,只需要复制nginx文件就可以 如 cp objs/nginx /usr/local/nginx/sbin/nginx 选择覆盖
 
(安装ssl模块 make的时候报错，需要手动置顶openssl的源码包路径，然后再make，如下命令) 
./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-openssl=/usr/local/openssl-1.1.1-pre7
  
nginx 查看已经安装的模块 ./nginx -V

编译安装
make
make install
查找安装路径：

whereis nginx

启动、停止nginx
cd /usr/local/nginx/sbin/
./nginx 
./nginx -s stop
./nginx -s quit
./nginx -s reload
./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。
./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。

./nginx -t 测试配置文件

查询nginx进程：

ps aux|grep nginx

开机自启动
即在rc.local增加启动代码就可以了。

vi /etc/rc.local
增加一行 /usr/local/nginx/sbin/nginx
设置执行权限：
需要添加/etc/rc.d/rc.local文件的执行权限，此文件在以后的新版本中将会被启用

chmod 755 rc.local

centos 7 不能按上面的方式自动启用
添加启动脚本到 vi /lib/systemd/system/nginx.service
systemctl enable nginx.service
如果提示没有执行权限，需要先执行这条语句systemctl daemon-reexec
修改了nginx.service文件后也需要先执行这个文件才能生效
systemctl daemon-reload
执行启动命令
systemctl start nginx.service


修改ulimit -n 最大文件数,也可以使用ulimit -a 查看
/etc/security/limits.conf
末尾添加如下:
* soft nofile 204800
* hard nofile 204800
* soft nproc 204800
* hard nproc 204800

*             代表针对所有用户   
noproc     是代表最大进程数   
nofile     是代表最大文件打开数


vi /etc/security/limits.d/20-nproc.conf
#加大普通用户限制  也可以改为unlimited
  *          soft    nproc     40960
  root       soft    nproc     unlimited
  
修改完后需要重启

添加健康检查配置


upstream docksys {
    #sticky;
    #ip_hash;
    server 192.168.202.143:8080;
    server 192.168.202.145:8080;
    check interval=3000 rise=2 fall=5 timeout=1000;
}

server{
    
	//server内添加监控访问界面
    location /nstatus {
        check_status;
        access_log off;
    }
}

下载编译 LuaJIT
wget -c http://luajit.org/download/LuaJIT-2.0.5.tar.gz
tar -zxvf LuaJIT-2.0.5.tar.gz
cd LuaJIT-2.0.5
make install PREFIX=/usr/local/luajit
echo "/usr/local/luajit/lib" > /etc/ld.so.conf.d/usr_local_luajit_lib.conf
ldconfig
配置环境变量
export LUAJIT_LIB=/usr/local/luajit/lib
export LUAJIT_INC=/usr/local/luajit/include/luajit-2.0
export LUA_INCLUDE_DIR=/usr/local/luajit/include/luajit-2.0

NDK与Lua_module
wget -c https://github.com/simplresty/ngx_devel_kit/archive/v0.3.1rc1.tar.gz
wget -c https://github.com/openresty/lua-nginx-module/archive/v0.10.13.tar.gz
tar -zxvf v0.3.1rc1.tar.gz
tar -zxvf v0.10.13.tar.gz

./configure --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/

./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/

make
make install

关闭防火墙
systemctl stop firewalld
systemctl disable firewalld


lua-upstream-nginx-module
https://github.com/openresty/lua-upstream-nginx-module/archive/v0.07.tar.gz
./configure --prefix=/usr/local/nginx --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/ --add-module=../lua-upstream-nginx-module-0.07/ 

./configure --prefix=/opt/nginx \
    --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" \
    --add-module=/path/to/lua-nginx-module \
    --add-module=/path/to/lua-upstream-nginx-module

make -j2
make install


ngx_http_dyups_module
https://github.com/yzprofile/ngx_http_dyups_module/archive/v0.2.9.tar.gz
./configure --prefix=/usr/local/nginx --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/ --add-module=../lua-upstream-nginx-module-0.07/ --add-module=../ngx_http_dyups_module-0.2.9/
make -j2
make install

curl -d "server 127.0.0.1:8089;server 127.0.0.1:8088;" 127.0.0.1:8081/upstream/dyhost
curl -H "host: dyhost" 127.0.0.1:8080
curl 127.0.0.1:8081/detail
curl -i -X DELETE 127.0.0.1:8081/upstream/dyhost

content_by_lua '
    local dyups = require "ngx.dyups"

    local status, rv = dyups.update("test", [[server 127.0.0.1:8088;]]);
    ngx.print(status, rv)
    if status ~= ngx.HTTP_OK then
        ngx.print(status, rv)
        return
    end
    ngx.print("update success")

    status, rv = dyups.delete("test")
    if status ~= ngx.HTTP_OK then
        ngx.print(status, rv)
        return
    end
    ngx.print("delete success")
';

error: ‘ngx_http_upstream_srv_conf_t’ has no member named ‘default_port’
解决方法：在/opt/nginx-1.5.11/src/http/下的ngx_http_upstream.h中添加

    ngx_array_t                     *values;
    ngx_array_t                     *lengths;
    ngx_uint_t                       retries;
    
    
    位置是：
     struct ngx_http_upstream_srv_conf_s {
    ngx_http_upstream_peer_t         peer;
    void                           **srv_conf;

    ngx_array_t                     *servers;  /* ngx_http_upstream_server_t */

    ngx_array_t                     *values;
    ngx_array_t                     *lengths;
    ngx_uint_t                       retries;

    ngx_uint_t                       flags;
    ngx_str_t                        host;
    u_char                          *file_name;
    ngx_uint_t                       line;
    in_port_t                        port;
    in_port_t                        default_port;
    ngx_uint_t                       no_port;  /* unsigned no_port:1 */
};
  然后再次执行 make； 问题得到解决。
  
1、ngx_http_dyups_module(https://github.com/yzprofile/ngx_http_dyups_module)提供了粗粒度的upstream管理方法，可以对整个upstream进行新增，删除。 
2、lua-upstream-nginx-module(https://github.com/openresty/lua-upstream-nginx-module) ，则提供了细粒度的管理方式，可以对某一个服务IP进行管理，其中提供的set_peer_down方法，可以对upstream中的某个ip进行上下线。
3. 也可以使用ngx_dynamic_upstream(https://github.com/cubicdaiya/ngx_dynamic_upstream)
这些插件有一个共同点，那就是在不需要重启nginx的基础上， 动态修改nginx的配置。 

4、redis2-nginx-module模块安装 
https://github.com/openresty/redis2-nginx-module/archive/v0.15.tar.gz
./configure --prefix=/usr/local/nginx --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/ --add-module=../lua-upstream-nginx-module-0.07/ --add-module=../ngx_http_dyups_module-0.2.9/ --add-module=../redis2-nginx-module-0.15/
make -j2
make install

5、set-misc-nginx-module https://github.com/openresty/set-misc-nginx-module/archive/v0.32.tar.gz (按这个配置进行编译安装的)
./configure --prefix=/usr/local/nginx --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1 --add-module=../lua-nginx-module-0.10.13 --add-module=../lua-upstream-nginx-module-0.07 --add-module=../ngx_http_dyups_module-0.2.9 --add-module=../redis2-nginx-module-0.15 --add-module=../set-misc-nginx-module-0.32
make -j2
make install
cp objs/nginx /usr/local/nginx/sbin/nginx

6、ngx_http_upstream_keepalive(失败，未安装)
wget -c http://mdounin.ru/hg/ngx_http_upstream_keepalive/archive/tip.tar.gz
./configure --prefix=/usr/local/nginx --with-ld-opt="-Wl,-rpath,$LUAJIT_LIB" --with-http_stub_status_module --with-http_ssl_module --with-http_realip_module --with-http_image_filter_module --add-module=../nginx-goodies-nginx-sticky-module-ng --add-module=../nginx_upstream_check_module-master --add-module=../ngx_devel_kit-0.3.1rc1/ --add-module=../lua-nginx-module-0.10.13/ --add-module=../lua-upstream-nginx-module-0.07/ --add-module=../ngx_http_dyups_module-0.2.9/ --add-module=../redis2-nginx-module-0.15/ --add-module=../set-misc-nginx-module-0.32/ --add-module=../ngx_http_upstream_keepalive-32e9e4b4b5e1/
make -j2
make install
cp objs/nginx /usr/local/nginx/sbin/nginx


=	开头表示精确匹配
^~	开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）
~	开头表示区分大小写的正则匹配
~*	开头表示不区分大小写的正则匹配
!~和!~*	分别为区分大小写不匹配及不区分大小写不匹配 的正则
/	通用匹配，任何请求都会匹配到。


location = / {
    proxy_pass http://tomcat:8080/index
}
location ^~ /static/ {
    root /webroot/static/;
}
location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {
    root /webroot/res/;
}
location / {
    proxy_pass http://tomcat:8080/
}

7、lua-redis-parser
https://github.com/openresty/lua-redis-parser/archive/v0.13.tar.gz
cd lua-redis-parser-0.10 
export LUA_INCLUDE_DIR=/usr/local/include/luajit-2.0/
gmake CC=gcc 
make install CC=gcc

8、lua-cjson
https://www.kyne.com.au/~mark/software/download/lua-cjson-2.1.0.tar.gz
修改MakeFile
[root@iZuf6679bcuj0vciz1vaicZ lua-cjson-2.1.0]# vi Makefile 
#LUA_INCLUDE_DIR =   $(PREFIX)/include
LUA_INCLUDE_DIR =   $(PREFIX)/include/luajit-2.0/
#LUA_CMODULE_DIR =   $(PREFIX)/lib/lua/$(LUA_VERSION)
LUA_CMODULE_DIR =   $(PREFIX)/lib
#LUA_MODULE_DIR =    $(PREFIX)/share/lua/$(LUA_VERSION)
LUA_MODULE_DIR =    $(PREFIX)/share/lua/luajit-2.0.5
安装
make
make install


ngx.say("capture failed")
ngx.print(res.body)
