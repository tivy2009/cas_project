rabbitMq安装
yum -y install gcc glibc-devel make ncurses-devel openssl-devel xmlto perl wget

yum install -y *epel* gcc-c++ unixODBC unixODBC-devel openssl-devel ncurses-devel

一、安装erlang 语言环境：
下载安装：
wget http://www.erlang.org/download/otp_src_18.3.tar.gz  //下载erlang包
tar -xzvf otp_src_18.3.tar.gz  //解压
cd otp_src_18.3/ //切换到安装路径
./configure --prefix=/usr/local/erlang  //生产安装配置
make && make install  //编译安装


yum list|grep ncurses
yum -y install ncurses-devel
yum install ncurses-devel

二、配置erlang环境变量：
vi /etc/profile  //在底部添加以下内容
    #set erlang environment
    ERL_HOME=/usr/local/erlang
    PATH=$ERL_HOME/bin:$PATH
    export ERL_HOME PATH

source /etc/profile  //生效

测试一下是否安装成功,在控制台输入命令erl

erl  //如果进入erlang的shell则证明安装成功，退出即可。

三、下载安装RabbitMQ：
下载安装
cd /usr/local  //切换到计划安装RabbitMQ的目录，我这里放在/usr/local
wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.1/rabbitmq-server-generic-unix-3.6.1.tar.xz  //下载RabbitMQ安装包
xz -d rabbitmq-server-generic-unix-3.6.1.tar.xz
tar -xvf rabbitmq-server-generic-unix-3.6.1.tar

解压后多了个文件夹rabbitmq-server-3.6.1 ，重命名为rabbitmq以便记忆。

mv rabbitmq_server-3.6.1/ rabbitmq

配置rabbitmq环境变量：
vi /etc/profile
    #set rabbitmq environment
    export PATH=$PATH:/usr/local/rabbitmq/sbin
source /etc/profile

四、启动服务：
rabbitmq-server -detached //启动rabbitmq，-detached代表后台守护进程方式启动。

五、查看状态
rabbitmqctl status

六、相关命令
启动服务：rabbitmq-server -detached【 /usr/local/rabbitmq/sbin/rabbitmq-server  -detached 】
查看状态：rabbitmqctl status【 /usr/local/rabbitmq/sbin/rabbitmqctl status  】
关闭服务：rabbitmqctl stop【 /usr/local/rabbitmq/sbin/rabbitmqctl stop  】
列出角色：rabbitmqctl list_users

七、配置网页插件：
首先创建目录，否则可能报错：
mkdir /etc/rabbitmq

然后启用插件：
rabbitmq-plugins enable rabbitmq_management

配置防火墙：
配置linux 端口 15672 网页管理 5672 AMQP端口：
firewall-cmd --permanent --add-port=15672/tcp
firewall-cmd --permanent --add-port=5672/tcp
systemctl restart firewalld.service
现在你在浏览器中输入服务器IP:15672 就可以看到RabbitMQ的WEB管理页面了，是不是很兴奋，可是你没有账号密码，别急。

配置访问账号密码和权限：
rabbitmqctl add_user admin admin  //添加用户，后面两个参数分别是用户名和密码，我这都用superrd了。
rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"  //添加权限
rabbitmqctl set_user_tags admin administrator  //修改用户角色

一般情况下，RabbitMQ的默认配置就足够了。如果希望特殊设置的话，有两个途径：
一个是环境变量的配置文件 rabbitmq-env.conf;
一个是配置信息的配置文件 rabbitmq.config;
注意，这两个文件默认是没有的，如果需要必须自己创建。

rabbitmq-env.conf
这个文件的位置是确定和不能改变的，位于：/etc/rabbitmq目录下（这个目录需要自己创建）。
文件的内容包括了RabbitMQ的一些环境变量，常用的有：
#RABBITMQ_NODE_PORT=    //端口号
#HOSTNAME=
RABBITMQ_NODENAME=mq
RABBITMQ_CONFIG_FILE=        //配置文件的路径
RABBITMQ_MNESIA_BASE=/rabbitmq/data        //需要使用的MNESIA数据库的路径
RABBITMQ_LOG_BASE=/rabbitmq/log        //log的路径
RABBITMQ_PLUGINS_DIR=/rabbitmq/plugins    //插件的路径

具体的列表见：http://www.rabbitmq.com/configure.html#define-environment-variables

rabbitmq.config
这是一个标准的erlang配置文件。它必须符合erlang配置文件的标准。
它既有默认的目录，也可以在rabbitmq-env.conf文件中配置。

文件的内容详见：http://www.rabbitmq.com/configure.html#config-items

监控

主要参考官方文档：http://www.rabbitmq.com/management.html

RabbitMQ提供了一个web的监控页面系统，这个系统是以Plugin的方式进行调用的。

首先，在rabbitmq-env.conf中配置好plugins目录的位置：RABBITMQ_CONFIG_FILE

将监控页面所需要的plugin下载到plugins目录下，这些plugin包括：
  mochiweb
  webmachine
  rabbitmq_mochiweb
  amqp_client
  rabbitmq_management_agent
  rabbitmq_management
下载路径位于：http://www.rabbitmq.com/plugins.html#rabbitmq_management 

重新启动RabbitMQ，输入http://server-name:55672/mgmt/ 就能够进入到监控页面

八、日志文件过大解决方案
执行如下命令:
rabbitmqctl  rotate_logs  .`date +%F` 

指示RabbitMQ node循环日志文件.
RabbitMQ中间件会将原来日志文件中的内容追加到原始名称和后辍的日志文件中，然后再将原始日志文件内容复制到新创建的日志上。实际上，当前日志内容会移到以此后辍结尾的文件上。当目标文件不存在时，将会进行创建。如果不指定后辍，则不会发生循环，日志文件只是重新打开。示例：
rabbitmqctl rotate_logs .1
此命令指示RabbitMQ node将日志文件的内容追加到新日志文件（文件名由原日志文件名和.1后辍构成）中。如. rabbit@mymachine.log.1 和 rabbit@mymachine-sasl.log.1. 最后, 日志会在原始位置恢复到新文件中. 

九、查看端口
netstat -tunlp

默认端口说明
client端通信口5672
管理口15672
server间内部通信口25672
erlang发现口：4369

十、查看集群
rabbitmqctl cluster_status

十一、集群配置
在每台机器的/etc/hosts，分别配置配置如下
192.168.1.100 linumu100 test100
192.168.1.101 linumu101 test101
设置erlang
erlang cookie文件的位置
如果我们使用解压缩方式安装部署的rabbitmq，那么这个文件会在${home}目录下，也就是$home/.erlang.cookie。如果我们使用rpm等安装包方式进行安装的，那么这个文件会在/var/lib/rabbitmq目录下
将 node1 的该文件复制到 node2、node3，注意这个文件的权限是 400（默认即是400），因此采用scp的方式只拷贝内容即可
通过cat  $home/.erlang.cookie来查看三台机器的cookie是否一致，设置erlang的目的是要保证集群内的cookie内容一致。
使用-detached参数运行各节点
rabbitmqctl stop
rabbitmq-server -detached
通过rabbitmqctl cluster_status查看节点状态 PS：要先拷贝cookie到另外两台机器上，保证三台机器上的cookie是一致的，然后再启动服务。
到这里的话，每个节点是作为单独的一台RabbitMQ存在的，也可以正常提供服务了
将 node2、node3与 node1 组成集群，这里以node2为例
node2# rabbitmqctl stop_app      
node2# rabbitmqctl join_cluster rabbit@node1               ####这里集群的名字一定不要写错了
node2# rabbitmqctl start_app

将node3重复上述操作，也加入node1的集群。
则此时 node2 与 node3 也会自动建立连接，集群配置完毕；（PS：如果要使用内存节点，则可以使用node2 # rabbitmqctl join_cluster --ram rabbit@node1加入集群）集群配置好后，可以在 RabbitMQ 任意节点上执行 rabbitmqctl cluster_status 来查看是否集群配置成功。

十二、设置镜像队列策略
在web界面，登陆后，点击“Admin--Virtual Hosts（页面右侧）”，在打开的页面上的下方的“Add a new virtual host”处增加一个虚拟主机，同时给用户“admin”和“guest”均加上权限（在页面直接设置、点点点即可）；
然后，在linux中执行如下命令
rabbitmqctl set_policy -p coresystem  ha-all "^" '{"ha-mode":"all"}'
rabbitmqctl set_policy -p coresystem  ha-all "^" '{"ha-mode":"all","ha-sync-mode":"automatic"}'
"coresystem" vhost名称， "^"匹配所有的队列， ha-all 策略名称为ha-all, '{"ha-mode":"all"}' 策略模式为 all 即复制到所有节点，包含新增节点。
则此时镜像队列设置成功。（这里的虚拟主机coresystem是代码中需要用到的虚拟主机，虚拟主机的作用是做一个消息的隔离，本质上可认为是一个rabbitmq-server，是否增加虚拟主机，增加几个，这是由开发中的业务决定，即有哪几类服务，哪些服务用哪一个虚拟主机，这是一个规划）
rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]
-p Vhost： 可选参数，针对指定vhost下的queue进行设置
Name: policy的名称
Pattern: queue的匹配模式(正则表达式)
Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode
    ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes
        all：表示在集群中所有的节点上进行镜像
        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定
        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定
    ha-params：ha-mode模式需要用到的参数
    ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual
priority：可选参数，policy的优先级
将所有队列设置为镜像队列，即队列会被复制到各个节点，各个节点状态保持一直。完成这 6 个步骤后，RabbitMQ 高可用集群就已经搭建好了，最后一个步骤就是搭建均衡器。


1）. 服务器启动与关闭

  启动: rabbitmq-server –detached
  关闭:rabbitmqctl stop
  若单机有多个实例，则在rabbitmqctlh后加–n 指定名称
  
2）. 插件管理

  开启某个插件：rabbitmq-plugins enable  xxx
  关闭某个插件：rabbitmq-plugins disable xxx
  注意：重启服务器后生效。
3）.virtual_host管理

  新建virtual_host: rabbitmqctl add_vhost  xxx
  撤销virtual_host:rabbitmqctl  delete_vhost xxx
4）. 用户管理

  新建用户：rabbitmqctl add_user xxx pwd
  删除用户: rabbitmqctl delete_user xxx
  查看用户：rabbitmqctl list_users
 改密码: rabbimqctlchange_password {username} {newpassword}
  设置用户角色：rabbitmqctlset_user_tags {username} {tag ...}
          Tag可以为 administrator,monitoring, management
          
5）. 权限管理

  权限设置：set_permissions [-pvhostpath] {user} {conf} {write} {read}
           Vhostpath
           Vhost路径
           user
  用户名
          Conf
  一个正则表达式match哪些配置资源能够被该用户访问。
          Write
  一个正则表达式match哪些配置资源能够被该用户读。
           Read
  一个正则表达式match哪些配置资源能够被该用户访问。
  
6）. 获取服务器状态信息

  服务器状态：rabbitmqctl status     ##其中可查看rabbitmq的版本信息
7）.获取集群状态信息

rabbitmqctl cluster_status

































